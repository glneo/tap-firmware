/*
 * This demo wipes different colors into view
 *
 * Copyright (C) 2016 TheLab.ms
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include "main.h"

unsigned int hold_frames = 3;

unsigned char frame;
unsigned char cycles;
unsigned char direction;

// This code is invoked once to initialize the demo...
void setup(void)
{
	direction = 1;
	frame = 15;
}

// This code is invoked once each time the LEDs are scanned...
void loop(void)
{
	int i, j;
	static unsigned char red;
	static unsigned char green;
	static unsigned char blue;

	frame++;
	if (frame > 15)
	{
		// Next color and direction
		frame = 0;
		red = rand() % FULL_INTENSITY;
		green = rand() % FULL_INTENSITY;
		blue = rand() % FULL_INTENSITY;

		direction = rand() & 7;
	}

	switch (direction)
	{
	case 0:	// Upper left to lower right
		for (i = 0; i < 8; i++)
			for (j = 0; j < 8; j++)
				if (j < frame - i)
				{
					display_buffer[i][j][RED] = red;
					display_buffer[i][j][GREEN] = green;
					display_buffer[i][j][BLUE] = blue;
				}
		break;

	case 1:  // Top down
		i = frame / 2;
		for (j = 0; j < 8; j++)
		{
			display_buffer[i][j][RED] = red;
			display_buffer[i][j][GREEN] = green;
			display_buffer[i][j][BLUE] = blue;
		}
		break;

	case 2:	// Upper right to lower left
		for (i = 0; i < 8; i++)
			for (j = 0; j < 8; j++)
				if (j > (7 - frame) + i)
				{
					display_buffer[i][j][RED] = red;
					display_buffer[i][j][GREEN] = green;
					display_buffer[i][j][BLUE] = blue;
				}
		break;

	case 3:  // Right to left
		j = 7 - frame / 2;
		for (i = 0; i < 8; i++)
		{
			display_buffer[i][j][RED] = red;
			display_buffer[i][j][GREEN] = green;
			display_buffer[i][j][BLUE] = blue;
		}
		break;

	case 4:	// Lower right to upper left
		for (i = 0; i < 8; i++)
			for (j = 0; j < 8; j++)
				if (j > (14 - frame) - i)
				{
					display_buffer[i][j][RED] = red;
					display_buffer[i][j][GREEN] = green;
					display_buffer[i][j][BLUE] = blue;
				}
		break;

	case 5:  // Bottom up
		i = 7 - frame / 2;
		for (j = 0; j < 8; j++)
		{
			display_buffer[i][j][RED] = red;
			display_buffer[i][j][GREEN] = green;
			display_buffer[i][j][BLUE] = blue;
		}
		break;

	case 6:	// Lower left to upper right
		for (i = 0; i < 8; i++)
			for (j = 0; j < 8; j++)
				if (i > (7 - frame) + j)
				{
					display_buffer[i][j][RED] = red;
					display_buffer[i][j][GREEN] = green;
					display_buffer[i][j][BLUE] = blue;
				}
		break;

	case 7:  // Left to right
		j = frame / 2;
		for (i = 0; i < 8; i++)
		{
			display_buffer[i][j][RED] = red;
			display_buffer[i][j][GREEN] = green;
			display_buffer[i][j][BLUE] = blue;
		}
		break;
	}
}
