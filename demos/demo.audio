/*
 * Image demo for the TAP (Technology Access Platform)
 *
 * Copyright (C) 2016 TheLab.ms
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include "main.h"

volatile uint8_t loudness[64];
volatile bool hold_demo = false;

const unsigned char colour_table[64][3] = {
	0, 0, 4,
	0, 1, 4,
	0, 2, 4,
	0, 3, 4,
	0, 4, 4,
	0, 4, 3,
	0, 4, 2,
	0, 4, 1,
	0, 4, 0,
	1, 4, 0,
	2, 4, 0,
	3, 4, 0,
	4, 3, 0,
	4, 2, 0,
	4, 1, 0,
	4, 0, 0,
};

void copy_frame()
{
	unsigned int col, row;
	unsigned int col_offset = state.x_address * 8;
	unsigned int row_offset = state.y_address * 8;

	for (row = 0; row < 8; row++)
	{
		int my_up = ((8 - row) + row_offset);
		for (col = 0; col < 8; col++)
		{
			int my_pos = (col + col_offset);
			if (my_up >= loudness[my_pos])
			{
				display_buffer[row][(col * COL_SIZE) + RED] = 0;
				display_buffer[row][(col * COL_SIZE) + GREEN] = 0;
				display_buffer[row][(col * COL_SIZE) + BLUE] = 0;
			}
			else
			{
				display_buffer[row][(col * COL_SIZE) + RED] = colour_table[my_up][RED];
				display_buffer[row][(col * COL_SIZE) + GREEN] = colour_table[my_up][GREEN];
				display_buffer[row][(col * COL_SIZE) + BLUE] = colour_table[my_up][BLUE];
			}
		}
	}
}

void loop(void)
{
	if (hold_demo)
	{
		__delay_cycles(1000); // so transition frame is not longer
		return;
	}

	copy_frame();

	hold_demo = true;
}

/* warning: called from interrupt context */
void handle_custom_packet(packet_t *p)
{
	memcpy(loudness, p->data, 64);
	hold_demo = false;
}
