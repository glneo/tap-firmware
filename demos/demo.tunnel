/*
 * This demo simulates going through a multicolored tunnel
 *
 * Copyright (C) 2016 TheLab.ms
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include "main.h"

unsigned char color;
unsigned char index;

// This code is invoked once to initialize the demo...
void setup(void)
{
	color = 0;
	index = 0;
}

void increment_intensity(void)
{
	unsigned int i, j, c;

	// Increment intensity if not 0 and not max
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
			for (c = RED; c <= BLUE; c++)
				if (display_buffer[i][j][c] && display_buffer[i][j][c] < FULL_INTENSITY)
					display_buffer[i][j][c]++;
}

void loop(void)
{
	int i, x, y;
	bool update = true;
	static unsigned char new_blue;
	static unsigned char new_green;
	static unsigned char new_red;

	if (index == 0)
	{
		// Next color
		color = (color % 7) + 1;

		new_red = (color & 1) ? 1 : 0;
		new_green = (color & 2) ? 1 : 0;
		new_blue = (color & 4) ? 1 : 0;
	}

	switch (index)
	{
	case 0: // Turn on inner ring
		x = 3;
		y = 4;
		break;
	case 16: // Turn on inner middle ring
		x = 2;
		y = 5;
		break;
	case 32: // Turn on outer middle ring
		x = 1;
		y = 6;
		break;
	case 48: // Turn on outer ring
		x = 0;
		y = 7;
		break;
	default:
		update = false;
	}

	if (update)
		for (i = x; i <= y; i++)
		{
			display_buffer[x][i][RED] = new_red;
			display_buffer[x][i][GREEN] = new_green;
			display_buffer[x][i][BLUE] = new_blue;

			display_buffer[y][i][RED] = new_red;
			display_buffer[y][i][GREEN] = new_green;
			display_buffer[y][i][BLUE] = new_blue;

			display_buffer[i][x][RED] = new_red;
			display_buffer[i][x][GREEN] = new_green;
			display_buffer[i][x][BLUE] = new_blue;

			display_buffer[i][y][RED] = new_red;
			display_buffer[i][y][GREEN] = new_green;
			display_buffer[i][y][BLUE] = new_blue;
		}

	increment_intensity();

	index = (index + 1) % 80;
}
