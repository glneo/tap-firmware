/*
 * This demo flips rapidly between bitmapped images
 *
 * Copyright (C) 2016 TheLab.ms
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include "main.h"

#define MIN_CYCLES	2
#define MAX_CYCLES	16

unsigned int hold_frames = MAX_CYCLES;

#define	HOLD_FRAMES	3

unsigned int frame;
unsigned int num_scans;
unsigned int faster;

unsigned char image_data[4][8][8] =
{
	{
		0, 0, 0, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 1, 1, 1,
		0, 0, 0, 0, 0, 1, 1, 1,
		0, 0, 0, 0, 1, 0, 0, 1,
		0, 0, 0, 1, 0, 0, 0, 1,
		0, 0, 1, 0, 0, 0, 0, 0,
		0, 1, 0, 0, 0, 0, 0, 0,
		1, 0, 0, 0, 0, 0, 0, 0,
	},
	{
		1, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 0, 0, 0, 0, 0, 0,
		0, 0, 1, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 0, 0, 0, 1,
		0, 0, 0, 0, 1, 0, 0, 1,
		0, 0, 0, 0, 0, 1, 1, 1,
		0, 0, 0, 0, 0, 1, 1, 1,
		0, 0, 0, 1, 1, 1, 1, 1,
	},
	{
		0, 0, 0, 0, 0, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 1, 0,
		0, 0, 0, 0, 0, 1, 0, 0,
		1, 0, 0, 0, 1, 0, 0, 0,
		1, 0, 0, 1, 0, 0, 0, 0,
		1, 1, 1, 0, 0, 0, 0, 0,
		1, 1, 1, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 0, 0, 0,
	},
	{
		1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 0, 0, 0, 0, 0,
		1, 1, 1, 0, 0, 0, 0, 0,
		1, 0, 0, 1, 0, 0, 0, 0,
		1, 0, 0, 0, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 1, 0, 0,
		0, 0, 0, 0, 0, 0, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 1,
	}
};

// This code is invoked once to initialize the demo...
void setup(void)
{
	frame = 0;
	num_scans = HOLD_FRAMES;
	faster = 1;
}

void loop(void)
{
	int row, col;

	for (row = 0; row < 8; row++)
		for (col = 0; col < 8; col++)
		{
			display_buffer[row][col][RED] = image_data[frame][row][col] * FULL_INTENSITY;
			display_buffer[row][col][GREEN] = image_data[frame][row][col] * FULL_INTENSITY;
			display_buffer[row][col][BLUE] = image_data[frame][row][col] * FULL_INTENSITY;
		}

	frame = (frame + 1) % 4;

	if (!frame)
	{
		if (num_scans == 0)
		{
			if (faster)
			{
				if (hold_frames <= MIN_CYCLES)
					faster = 0;
			}
			else
			{
				if (hold_frames >= MAX_CYCLES)
					faster = 1;
			}
			if (faster)
			{
				hold_frames--;
			}
			else
			{
				hold_frames++;
			}
			num_scans = HOLD_FRAMES;
		}
		else
			num_scans--;
	}
}
