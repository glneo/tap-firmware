/*
 * This demo repeats the glider from Conway's Game of Life.
 *
 * Copyright (C) 2016 TheLab.ms
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include "main.h"

#include <string.h>

unsigned int hold_frames = 7;

int numFrames;

unsigned int color;
unsigned int generation;

#define GUTTER 5 /* Unseen cells to simulate infinite playfield */
unsigned char New[GUTTER * 2 + 8][GUTTER * 2 + 8];
unsigned char Old[GUTTER * 2 + 8][GUTTER * 2 + 8];

void create_glider(void)
{
	New[2][3] = 1;
	New[3][4] = 1;
	New[4][2] = 1;
	New[4][3] = 1;
	New[4][4] = 1;
}

void setup(void)
{
	memset(Old, 0, sizeof(Old));
	generation = 0;
	color = 1;
}

void new_generation(void)
{
	unsigned int row, col;

	memset(New, 0, sizeof(New));
	for (row = 1; row < 8 + GUTTER * 2 - 1; row++)
		for (col = 1; col < 8 + GUTTER * 2 - 1; col++)
		{
			unsigned int neighbors = 0;
			if (Old[row - 1][col - 1])
				neighbors++;
			if (Old[row - 1][col])
				neighbors++;
			if (Old[row - 1][col + 1])
				neighbors++;
			if (Old[row][col - 1])
				neighbors++;
			if (Old[row][col + 1])
				neighbors++;
			if (Old[row + 1][col - 1])
				neighbors++;
			if (Old[row + 1][col])
				neighbors++;
			if (Old[row + 1][col + 1])
				neighbors++;

			if (Old[i][col]) // Cell is live
				if (neighbors == 2 || neighbors == 3)
					New[row][col] = 1; // Cell survives
			else // Cell is dead
				if (neighbors == 3)
					New[row][col] = 1; // A new cell is born
		}

	if (generation == 0)
	{
		if (color >= 7)
			color = 1;
		else
			color++;
		create_glider();
		generation = 39;
	}
	else
		generation--;
}

void display_new(void)
{
	unsigned int row, col;

	for (row = 0; row < 8; row++)
		for (col = 0; col < 8; col++)
			if (New[row + GUTTER][col + GUTTER])
			{
				display_buffer[row][col][RED] = (color & 1) * FULL_INTENSITY;
				display_buffer[row][col][GREEN] = (color & 2) * FULL_INTENSITY;
				display_buffer[row][col][BLUE] = (color & 4) * FULL_INTENSITY;
			}
}

void loop(void)
{
	// Clear the display
	memset(display_buffer, 0, sizeof(display_buffer));

	new_generation();

	display_new();

	memcpy(Old, New, sizeof(Old));
}
